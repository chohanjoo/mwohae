<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="sns.message.dao.UserDao" >

    <select id="retrieveAllUser" resultType="sns.message.dto.UserDto">
        select * from user
    </select>

    <select id="retrieveUserById" resultType="sns.message.dto.UserDto">
        select * from user where id = #{user_id}
    </select>

    <select id="retrieveRecommendFriends" parameterType="java.util.Map" resultType="sns.message.dto.FriendDto">
        select * from friend f
        where f.user_id = #{friend_id} and f.friend_id != #{user_id} and
          f.friend_id not in
          <foreach collection="list" item="friend" index="index" open="(" separator="," close=")">
              #{friend.friend_id}
          </foreach>
    </select>

    <!--<select id="retrieveRecommendFriends" resultType="sns.message.dto.UserDto">-->
        <!--select * from user u-->
        <!--where u.id != #{user_id} and not exists (-->
          <!--select * from friend f where u.id = f.friend_id and f.user_id = #{user_id}-->
        <!--)-->
    <!--</select>-->

    <insert id="createUser" useGeneratedKeys="true">
        insert into user (id,pw,email,name, isAccountNonExpired, isAccountNonLocked, isCredentialsNonExpired, isEnabled) values (#{id}, #{pw}, #{email}, #{name}, #{isAccountNonExpired}, #{isAccountNonLocked}, #{isCredentialsNonExpired}, #{isEnabled})
    </insert>

    <delete id="deleteUser" parameterType="String">
        delete from user where id = #{user_id}
    </delete>

    <select id="retrieveAuthority" resultType="org.springframework.security.core.authority.SimpleGrantedAuthority">
        select authority_name from authority where user_id = #{user_id}
    </select>

    <insert id="createAuthority" parameterType="org.springframework.security.core.GrantedAuthority">
        insert into authority (user_id, authority_name)
        values
        <foreach collection="authorities" item="authority" index="index" separator=",">
            (#{id}, #{authority, typeHandler=sns.message.config.AuthorityTypeHandler})
        </foreach>
    </insert>

    <select id="retrieveUserFriends" resultType="sns.message.dto.FriendDto">
        select friend_id from friend where user_id = #{user_id}
    </select>

    <select id="retrieveFriend" resultType="sns.message.dto.FriendDto">
        select * from friend where user_id = #{user_id} and friend_id = #{friend_id}
    </select>

    <insert id="createUserFriend" useGeneratedKeys="true">
        insert into friend (user_id,friend_id) values (#{user_id},#{friend_id})
    </insert>

    <delete id="deleteUserFriend" parameterType="sns.message.request.DeleteFriendRequest">
        delete from friend where user_id = #{user_id} and friend_id = #{friend_id}
    </delete>

    <delete id="deleteAuthority" parameterType="String">
        delete from authority where user_id = #{user_id}
    </delete>

</mapper>